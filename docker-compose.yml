version: "3.9"

networks:
  my-custom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24
    driver_opts:
      com.docker.network.driver.mtu: 9000
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

services:
  mysql8:
    build:
      context: ./DB
      dockerfile: Dockerfile
    image: mysql-custom:1.0 
    container_name: mysql8-container
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.30
    ports:
      - "3330:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./DB/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      MYSQL_ROOT_PASSWORD: Zhfldk11!
      MYSQL_DATABASE: bookdb
      MYSQL_USER: dbonn
      MYSQL_PASSWORD: Zhfldk11!
      MYSQL_ROOT_HOST: '%'  # 모든 호스트에서의 접근 허용

  redis:
    build:
      context: ./BN_REDIS
      dockerfile: Dockerfile
    image: bn_redis:latest
    container_name: bn_redis-container
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.50
    ports:
      - "6379:6379"
    command: redis-server --port 6379

  bn:
    build:
      context: ./BN
      dockerfile: Dockerfile
    image: bn:latest
    container_name: bn-container
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.8'
        reservations:
          memory: 256M
          cpus: '0.4'
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.40
    dns_opt:
      - use-vc
    sysctls:
      - net.core.somaxconn=1024
      - net.ipv4.tcp_max_syn_backlog=1024
      - net.ipv4.ip_local_port_range=1024 65535
      - net.ipv4.tcp_fin_timeout=30
      - net.ipv4.tcp_tw_reuse=1
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    depends_on:
      mysql8:
        condition: service_healthy
    ports:
      - "8095:8095"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=development
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql8-container:3306/bookdb?useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=dbonn
      - SPRING_DATASOURCE_PASSWORD=Zhfldk11!
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
    volumes:
      - bn_logs:/app/logs
      - bn_data:/app/data
      - /:/host_root:ro  # 호스트 루트를 읽기 전용으로 마운트
    tmpfs:
      - /app/temp:rw,noexec,nosuid,size=100M
      - /app/cache:rw,noexec,nosuid,size=50M
    x-docker-registry-auth:
      username: ${DOCKER_USERNAME}
      password: ${DOCKER_PASSWORD}

  fn:
    build:
      context: ./FN
      dockerfile: Dockerfile
    image: react-docker-app:latest
    container_name: react-container
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.6'
        reservations:
          memory: 128M
          cpus: '0.3'
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.10
    dns_opt:
      - use-vc
    sysctls:
      - net.core.somaxconn=1024
      - net.ipv4.tcp_max_syn_backlog=1024
      - net.ipv4.ip_local_port_range=1024 65535
    volumes:
      - /tmp/nginx/client-body:/var/lib/nginx/client-body
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=/bn  # nginx가 프록시할 경로
      - NGINX_MAX_UPLOAD_SIZE=10G
      - NGINX_PROXY_TIMEOUT=600
      - NGINX_CONNECT_TIMEOUT=600
    depends_on:
      bn:
        condition: service_healthy
    ports:
      - "3000:80"

  mysql-exporter:
    build:
      context: ./exporters/mysql
      dockerfile: Dockerfile
    image: custom-mysql-exporter:latest
    container_name: mysql-exporter
    command:
      - --web.listen-address=:9104
      - --collect.info_schema.tables
      - --collect.info_schema.innodb_metrics
      - --collect.global_status
      - --collect.global_variables
      - --collect.slave_status
      - --collect.info_schema.processlist
      - --config.my-cnf=/etc/mysqld-exporter/.my.cnf
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.31
    ports:
      - "9104:9104"
    depends_on:
      mysql8:
        condition: service_healthy
    restart: unless-stopped


  redis-exporter:
    build:
      context: ./exporters/redis
      dockerfile: Dockerfile
    image: custom-redis-exporter:latest
    container_name: redis-exporter
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.51
    ports:
      - "9121:9121"
    depends_on:
      - redis

  nodejs-exporter:
    build:
      context: ./exporters/nginx
      dockerfile: Dockerfile
    image: custom-nginx-exporter:latest
    container_name: fn-exporter
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.11
    ports:
      - "9113:9113"
    depends_on:
      - fn

volumes:
  bn_logs:
    driver: local
  bn_data:
    driver: local
  nginx_upload_cache:
    driver: local
 