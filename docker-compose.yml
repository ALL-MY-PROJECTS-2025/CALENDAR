version: "3.9"

networks:
  my-custom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24
    driver_opts:
      com.docker.network.driver.mtu: 9000
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

services:
  mysql8:
    build:
      context: ./DB
      dockerfile: Dockerfile
    image: mysql-custom:1.0 
    container_name: mysql8-container
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.30
    ports:
      - "3330:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      MYSQL_ROOT_PASSWORD: Zhfldk11!
      MYSQL_DATABASE: bookdb
      MYSQL_USER: dbonn
      MYSQL_PASSWORD: Zhfldk11!
      MYSQL_ROOT_HOST: '%'  # 모든 호스트에서의 접근 허용

  redis:
    build:
      context: ./BN_REDIS
      dockerfile: Dockerfile
    image: bn_redis:latest
    container_name: bn_redis-container
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.50
    ports:
      - "6376:6376"

  bn:
    build:
      context: ./BN
      dockerfile: Dockerfile
    image: bn:latest
    container_name: bn-container
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.8'
        reservations:
          memory: 256M
          cpus: '0.4'
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.40
    dns_opt:
      - use-vc
    sysctls:
      - net.core.somaxconn=1024
      - net.ipv4.tcp_max_syn_backlog=1024
      - net.ipv4.ip_local_port_range=1024 65535
      - net.ipv4.tcp_fin_timeout=30
      - net.ipv4.tcp_tw_reuse=1
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    depends_on:
      mysql8:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s  # 초기 시작 대기 시간
    ports:
      - "8095:8095"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql8-container:3306/bookdb?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: dbonn
      SPRING_DATASOURCE_PASSWORD: Zhfldk11!
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
    volumes:
      - bn_logs:/app/logs
      - bn_data:/app/data
      - /:/host_root:ro  # 호스트 루트를 읽기 전용으로 마운트
    tmpfs:
      - /app/temp:rw,noexec,nosuid,size=100M
      - /app/cache:rw,noexec,nosuid,size=50M

  fn:
    build:
      context: ./FN
      dockerfile: Dockerfile
    image: react-docker-app:latest
    container_name: react-container
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.6'
        reservations:
          memory: 128M
          cpus: '0.3'
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.10
    dns_opt:
      - use-vc
    sysctls:
      - net.core.somaxconn=1024
      - net.ipv4.tcp_max_syn_backlog=1024
      - net.ipv4.ip_local_port_range=1024 65535
    volumes:
      - /tmp/nginx/client-body:/var/lib/nginx/client-body
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: /bn  # nginx가 프록시할 경로
      NGINX_MAX_UPLOAD_SIZE: 10G
      NGINX_PROXY_TIMEOUT: 600
      NGINX_CONNECT_TIMEOUT: 600
    depends_on:
      bn:
        condition: service_healthy
    ports:
      - "3000:80"

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    image: custom-prometheus:latest
    container_name: prometheus-container
    volumes:
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.70
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.7'
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-S", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    depends_on:
      bn:
        condition: service_healthy
      redis:
        condition: service_started
      mysql8:
        condition: service_healthy

  grafana:                                                # [모니터링 - Grafana]
    image: grafana/grafana:latest
    container_name: grafana-container
    volumes:
      - grafana_data:/var/lib/grafana                    # 데이터 저장
    environment:
      - GF_SECURITY_ADMIN_USER=admin                     # Grafana 관리자 계정
      - GF_SECURITY_ADMIN_PASSWORD=admin123              # Grafana 관리자 비밀번호
    ports:
      - "3001:3000"                                      # Grafana UI 포트
    networks:
      my-custom-network:
        ipv4_address: 192.168.1.71
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.4'
    depends_on:
      prometheus:
        condition: service_healthy
      bn:
        condition: service_healthy
      redis:
        condition: service_started
      mysql8:
        condition: service_healthy
    restart: unless-stopped

volumes:
  bn_logs:
    driver: local
  bn_data:
    driver: local
  nginx_upload_cache:
    driver: local
  prometheus_data:                                        # [모니터링 데이터]
    driver: local
  grafana_data:                                          # [대시보드 데이터]
    driver: local      