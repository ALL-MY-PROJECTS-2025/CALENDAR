import { useState, useEffect } from "react";
import "./css/SettingsModal.css";

const SettingsModal = ({
  years,
  months,
  selectedSettings,
  onSettingsUpdate,
  currentYear,
  currentMonth,
  onClose,
}) => {
  // yearsÏôÄ monthsÎäî Ïù¥Ï†ú propsÎ°úÎßå ÏÇ¨Ïö©
  // setYears, setMonths ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå

  const [modalYear, setModalYear] = useState(selectedSettings.year)
  const [modalmonths, setModalmonths] = useState(selectedSettings.month)
  //-----------------------------------

  //-----------------------------------
  // Ïó∞ÎèÑ Î∞è Ïõî Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    const currentYear = new Date().getFullYear();
    setModalYear(currentYear);
    setModalmonths(new Date().getMonth() + 1);
  }, []);

  //-----------------------------------
  // Ïó∞ÎèÑ Î∞è Ïõî Î≥ÄÍ≤Ω Ïãú Ï¥àÍ∏∞Ìôî
  //-----------------------------------
  useEffect(() => {
    console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!",modalYear,modalmonths)
    fetchSettings(modalYear, modalmonths);
  }, [modalYear,modalmonths])

  useEffect(() => {
    // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ïñ∏ÎßàÏö¥Ìä∏Îê† Îïå backdrop Ï†úÍ±∞
    return () => {
      const backdrops = document.getElementsByClassName('modal-backdrop');
      if (backdrops.length > 0) {
        Array.from(backdrops).forEach(backdrop => {
          document.body.removeChild(backdrop);
        });
      }
      // bodyÏóêÏÑú modal-open ÌÅ¥ÎûòÏä§ÎèÑ Ï†úÍ±∞
      document.body.classList.remove('modal-open');
    };
  }, []);

  const handleSettingChange = (name, value) => {
    onSettingsUpdate({
      ...selectedSettings,
      [name]: value
    });
  };

  const handleYearChange = (e) => {
    setModalYear(e.target.value);
    const newSettings = {
      ...selectedSettings,
      year: e.target.value,
    };
    onSettingsUpdate(newSettings);
  };

  const handleMonthChange = (e) => {
    setModalmonths(e.target.value);
    const newSettings = {
      ...selectedSettings,
      month: e.target.value,
    };
    onSettingsUpdate(newSettings);
  };

  const fetchSettings = async (year, month) => {
    console.log("upload modal's fetchSettings func ...",year,month);
    try {
      const response = await fetch(`http://localhost:8095/settings/get/${year}/${month}`);
      if (!response.ok) {
        console.warn("‚ö†Ô∏è ÏÑúÎ≤ÑÏóêÏÑú ÏÑ§Ï†ïÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏùå. Í∏∞Î≥∏ ÏÑ§Ï†ï ÏÇ¨Ïö©.");
        
      }
      const data = await response.json();
      console.log("üìå ÏÑúÎ≤ÑÏóêÏÑú Í∞ÄÏ†∏Ïò® ÏÑ§Ï†ï:", data);

      // Í∞ÄÏ†∏Ïò® Îç∞Ïù¥ÌÑ∞Î•º ÏÉÅÌÉúÏóê Ï†ÄÏû•
      onSettingsUpdate({
        year: data.year,
        month: data.month,
        layout: data.layout,
        imageArray: data.imageArray,
        defaultValue: data.defaultValue,
      });

    } catch (error) {
      console.error("‚ùå ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
    }
  };
  //-----------------------------------




  // Î†àÏù¥ÏïÑÏõÉ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleLayoutChange = (e) => {
    const newSettings = {
      ...selectedSettings,
      layout: e.target.value,
    };
    onSettingsUpdate(newSettings);
  };

  // Ïù¥ÎØ∏ÏßÄ Î∞∞Ïó¥ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleImageArrayChange = (e) => {
    const newSettings = {
      ...selectedSettings,
      imageArray: e.target.value,
    };
    onSettingsUpdate(newSettings);
  };

  //-----------------------------------
  // Îã§Ïö¥Î°úÎìú Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  //-----------------------------------
  const handleDownloadClick = (option) => {
    console.log("download btn clicked..");
  };

  //-----------------------------------
  //Ïõî Ï†ÄÏû• Ìï∏Îì§Îü¨
  //-----------------------------------
  const handleApplyMonth = () => {
    const newSettings = {
      ...selectedSettings,
      defaultValue: false,
    };
    onSettingsUpdate(newSettings);
  };

  //-----------------------------------
  //Í∏∞Î≥∏Í∞í  Ï†ÄÏû• Ìï∏Îì§Îü¨
  //-----------------------------------
  const handleApplyDefault = () => {
    const newSettings = {
      ...selectedSettings,
      defaultValue: true,
    };
    onSettingsUpdate(newSettings);
  };

  const handleClose = () => {
    onClose();
  };

  return (
    <>
      <div className="modal-backdrop fade show"></div>
      <div
        className="modal fade show settingmodal"
        id="staticBackdrop"
        style={{ display: 'block' }}
        tabIndex="-1"
        aria-modal="true"
        role="dialog"
      >
        <div className="modal-dialog  modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title" id="staticBackdropLabel">
                ÌôòÍ≤ΩÏÑ§Ï†ï
              </h5>
              <button
                type="button"
                className="btn-close"
                onClick={handleClose}
                aria-label="Close"
              ></button>
            </div>
            <div className="modal-body">
              <div className="items">
                {/* YYYY/MM Ï†ïÎ≥¥ ÏÑ†ÌÉù */}
                <div className="item choose-yyyymm">
                  <label htmlFor="yearSelect"></label>
                  <select
                    id="yearSelect"
                    className="form-select"
                    value={selectedSettings.year}
                    onChange={handleYearChange}
                  >
                    {years.map((year) => (
                      <option key={year} value={year}>
                        {year}
                      </option>
                    ))}
                  </select>
                  <label htmlFor="monthSelect"></label>
                  <select
                    id="monthSelect"
                    className="form-select"
                    value={selectedSettings.month}
                    onChange={handleMonthChange}
                  >
                    {months.map((month) => (
                      <option key={month} value={month}>
                        {month.toString().padStart(2, "0")}Ïõî
                      </option>
                    ))}
                  </select>
                </div>
                <hr />

                {/* Î†àÏù¥ÏïÑÏõÉ ÏÑ§Ï†ï */}
                <div className="item choose-layout">
                  <div className="title">Î†àÏù¥ÏïÑÏõÉ</div>
                  <div className="rowLayout">
                    <div className="imageblock">Ïù¥ÎØ∏ÏßÄ</div>
                    <div className="contentblock">Îã¨Î†•</div>
                  </div>
                  <div className="colLayout">
                    <div className="imageblock">Ïù¥ÎØ∏ÏßÄ</div>
                    <div className="contentblock">Îã¨Î†•</div>
                  </div>
                </div>

                <div className="item choose-layout-radio">
                  <div className="title">ÏÑ†ÌÉù</div>
                  <div className="rowLayout">
                    <input
                      type="radio"
                      name="layout"
                      value="row"
                      checked={selectedSettings.layout === "row"}
                      onChange={handleLayoutChange}
                    />
                  </div>
                  <div className="colLayout">
                    <input
                      type="radio"
                      name="layout"
                      value="col"
                      checked={selectedSettings.layout === "col"}
                      onChange={handleLayoutChange}
                    />
                  </div>
                </div>
                <hr />

                {/* Ïù¥ÎØ∏ÏßÄ Î∞∞Ïπò ÏÑ§Ï†ï */}
                <div className="item">
                  <div className="title">Ïù¥ÎØ∏ÏßÄ Î∞∞Ïπò ÏÑ§Ï†ï</div>
                </div>
                <div className="item choose-image-array">
                  <div className="array-1">
                    <input
                      type="radio"
                      name="array"
                      value="1"
                      checked={selectedSettings.imageArray === "1"}
                      onChange={handleImageArrayChange}
                    />
                    <div></div>
                  </div>

                  <div className="array-2-row">
                    <input
                      type="radio"
                      name="array"
                      value="2-row"
                      checked={selectedSettings.imageArray === "2-row"}
                      onChange={handleImageArrayChange}
                    />
                    <div></div>
                    <div></div>
                  </div>

                  <div className="array-2-col">
                    <input
                      type="radio"
                      name="array"
                      value="2-col"
                      checked={selectedSettings.imageArray === "2-col"}
                      onChange={handleImageArrayChange}
                    />
                    <div></div>
                    <div></div>
                  </div>

                  <div className="array-4">
                    <input
                      type="radio"
                      name="array"
                      value="4"
                      checked={selectedSettings.imageArray === "4"}
                      onChange={handleImageArrayChange}
                    />
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                  </div>
                </div>

                <hr />

                {/* ÎÇ¥Î†§Î∞õÍ∏∞ */}
                <div className="item">
                  <div className="title">Îã§Ïö¥Î°úÎìú</div>
                </div>
                <div className="item download">
                  <div className="item">
                    <button
                      className="btn"
                      onClick={() => handleDownloadClick("ÏõîÎ≥Ñ ÏÇ¨ÏßÑ")}
                    >
                      ÏõîÎ≥Ñ ÏÇ¨ÏßÑ Î∞õÍ∏∞
                    </button>
                  </div>
                  <div className="item">
                    <button
                      className="btn"
                      onClick={() => handleDownloadClick("Ï†ÑÏ≤¥ ÏÇ¨ÏßÑ")}
                    >
                      Ï†ÑÏ≤¥ ÏÇ¨ÏßÑ Î∞õÍ∏∞
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button
                type="button"
                className="btn btn-primary"
                onClick={handleApplyDefault}
              >
                Í∏∞Î≥∏Í∞í Ï†ÅÏö©
              </button>
              <button
                type="button"
                className="btn btn-primary"
                onClick={handleApplyMonth}
              >
                Ïõî Ï†ÅÏö©
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default SettingsModal;
